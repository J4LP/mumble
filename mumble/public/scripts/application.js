var mumble;
(function (mumble) {
    'use strict';
    var Notification = (function () {
        function Notification(type, message) {
            this.type = type;
            this.message = message;
        }
        return Notification;
    })();
    mumble.Notification = Notification;
    var NotificationsService = (function () {
        /* @ngInject */
        function NotificationsService($timeout) {
            this.notifications = [];
            this.$timeout = $timeout;
        }
        NotificationsService.prototype.addNotification = function (notification) {
            var _this = this;
            this.notifications.push(notification);
            var last = this.notifications.length - 1;
            this.$timeout(function () {
                _this.notifications.splice(last, 1);
            }, 3500);
        };
        NotificationsService.prototype.getNotifications = function () {
            return this.notifications;
        };
        return NotificationsService;
    })();
    mumble.NotificationsService = NotificationsService;
})(mumble || (mumble = {}));

var mumble;
(function (mumble) {
    'use strict';
    var RadarStructuresController = (function () {
        /* @ngInject */
        function RadarStructuresController($scope, Restangular, $modal) {
            this.$scope = $scope;
            this.$scope.structures = [];
            this.$scope.events = this;
            this.Restangular = Restangular;
            this.$modal = $modal;
            this.loadStructures();
        }
        RadarStructuresController.prototype.loadStructures = function () {
            var _this = this;
            this.Restangular.all('structures').getList().then(function (objects) {
                _this.$scope.structures = objects;
                if (objects.length > 0) {
                    _this.$scope.lastUpdated = objects[0].updated_on;
                }
                else {
                    _this.$scope.lastUpdated = new Date();
                }
            });
        };
        RadarStructuresController.prototype.openScanModal = function (structure) {
            var _this = this;
            var modalInstance = this.$modal.open({
                templateUrl: 'structure_scan_modal.html',
                controller: 'StructureScanModalController',
                resolve: {
                    structure: function () {
                        return structure;
                    }
                }
            });
            modalInstance.result.then(function () {
                _this.loadStructures();
            });
        };
        return RadarStructuresController;
    })();
    mumble.RadarStructuresController = RadarStructuresController;
})(mumble || (mumble = {}));

var mumble;
(function (mumble) {
    'use strict';
    var AddStructureController = (function () {
        /* @ngInject */
        function AddStructureController($scope, Restangular, $location, $http) {
            this.$scope = $scope;
            this.$scope.events = this;
            this.Restangular = Restangular;
            this.$location = $location;
            this.$http = $http;
        }
        AddStructureController.prototype.init = function (callback_url) {
            this.callback_url = callback_url;
        };
        AddStructureController.prototype.saveStructure = function () {
            var _this = this;
            console.log('foo');
            this.Restangular.all('structures').post(this.$scope.structure).then(function (structure) {
                window.location.replace(_this.callback_url);
            }, function (error) {
                console.log(error);
                //swal('Error!', data.error ? data.error : 'Unknown server error.', 'error');
            });
        };
        AddStructureController.prototype.getSystem = function (query) {
            return this.$http.post('/api/autocomplete/systems', { query: query }).then(function (response) {
                return response.data.map(function (system) {
                    return system.name;
                });
            });
        };
        AddStructureController.prototype.getEveType = function (query) {
            return this.$http.post('/api/autocomplete/evetypes', { query: query }).then(function (response) {
                return response.data.map(function (system) {
                    return system.name;
                });
            });
        };
        return AddStructureController;
    })();
    mumble.AddStructureController = AddStructureController;
})(mumble || (mumble = {}));

var mumble;
(function (mumble) {
    'use strict';
    var NotificationsController = (function () {
        /* @ngInject */
        function NotificationsController($scope, NotificationsService) {
            this.$scope = $scope;
            this.$scope.events = this;
            this.NotificationsService = NotificationsService;
            this.$scope.notifications = this.NotificationsService.getNotifications();
            this.$scope.getCSSClass = this.getCSSClass;
        }
        NotificationsController.prototype.closeNotification = function (index) {
            this.$scope.notifications.splice(index, 1);
        };
        NotificationsController.prototype.getCSSClass = function (notification) {
            if (notification.type == 'success') {
                return 'alert-success';
            }
            else if (notification.type == 'warning') {
                return 'alert-warning';
            }
            else if (notification.type == 'danger') {
                return 'alert-danger';
            }
            else {
                return 'alert-info';
            }
        };
        return NotificationsController;
    })();
    mumble.NotificationsController = NotificationsController;
})(mumble || (mumble = {}));

var mumble;
(function (mumble) {
    'use strict';
    var StructureScanModalController = (function () {
        /* @ngInject */
        function StructureScanModalController($scope, $modalInstance, structure, Restangular) {
            this.$scope = $scope;
            this.$scope.structure = structure;
            this.$scope.editingScan = false;
            this.$scope.events = this;
            this.Restangular = Restangular;
            this.$modalInstance = $modalInstance;
        }
        StructureScanModalController.prototype.saveScan = function () {
            var _this = this;
            this.$scope.structure.customPUT({ 'scan': this.$scope.newScan }, 'scan').then(function () {
                _this.$modalInstance.close();
            });
        };
        return StructureScanModalController;
    })();
    mumble.StructureScanModalController = StructureScanModalController;
})(mumble || (mumble = {}));

var mumble;
(function (mumble) {
    'use strict';
    var ScansController = (function () {
        /* @ngInject */
        function ScansController($scope, Restangular, $modal) {
            var _this = this;
            this.openNewScanModal = function () {
                var modalInstance = _this.$modal.open({
                    templateUrl: 'new_scan_modal.html',
                    controller: 'NewScanModalController',
                    resolve: {
                        callbackUrl: function () {
                            return _this.callbackUrl;
                        }
                    }
                });
                modalInstance.result.then(function () {
                    _this.loadScans();
                });
            };
            this.$scope = $scope;
            this.$scope.scans = [];
            this.$scope.events = this;
            this.Restangular = Restangular;
            this.$modal = $modal;
            this.loadScans();
        }
        ScansController.prototype.init = function (callbackUrl) {
            this.callbackUrl = callbackUrl.slice(0, -1);
        };
        ScansController.prototype.loadScans = function () {
            var _this = this;
            this.Restangular.all('scans').getList().then(function (objects) {
                _this.$scope.scans = objects;
            });
        };
        return ScansController;
    })();
    mumble.ScansController = ScansController;
})(mumble || (mumble = {}));

var mumble;
(function (mumble) {
    'use strict';
    var NewScanModalController = (function () {
        /* @ngInject */
        function NewScanModalController($scope, $modalInstance, callbackUrl, Restangular) {
            this.$scope = $scope;
            this.$scope.events = this;
            this.Restangular = Restangular;
            this.$modalInstance = $modalInstance;
            this.callbackUrl = callbackUrl;
            console.log(callbackUrl);
        }
        NewScanModalController.prototype.saveScan = function () {
            var _this = this;
            this.Restangular.all('scans').post({ 'raw': this.$scope.rawScan }).then(function (scan) {
                window.location.replace(_this.callbackUrl + scan.id);
            });
        };
        return NewScanModalController;
    })();
    mumble.NewScanModalController = NewScanModalController;
})(mumble || (mumble = {}));

///<reference path="../../../typings/tsd.d.ts" />
///<reference path="services/notifications.service.ts" />
///<reference path="controllers/mumble_structures.controller.ts" />
///<reference path="controllers/add_structure.controller.ts" />
///<reference path="controllers/notifications.controller.ts" />
///<reference path="controllers/structure_scan_modal.controller.ts" />
///<reference path="controllers/scans.controller.ts" />
///<reference path="controllers/new_scan_modal.controller.ts" />
var mumble;
(function (mumble) {
    'use strict';
    var RadarApp = angular.module('mumble', ['restangular', 'ui.bootstrap']).service('NotificationsService', mumble.NotificationsService).controller('RadarStructuresController', mumble.RadarStructuresController).controller('AddStructureController', mumble.AddStructureController).controller('NotificationsController', mumble.NotificationsController).controller('StructureScanModalController', mumble.StructureScanModalController).controller('ScansController', mumble.ScansController).controller('NewScanModalController', mumble.NewScanModalController).config(function (RestangularProvider) {
        RestangularProvider.setBaseUrl('/api');
        RestangularProvider.addResponseInterceptor(function (data, operation, what, url, response, deferred) {
            var extractedData;
            if (operation === 'getList') {
                extractedData = data.objects;
            }
            else {
                extractedData = data;
            }
            return extractedData;
        });
    });
})(mumble || (mumble = {}));

//# sourceMappingURL=data:application/json;base64,